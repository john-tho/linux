/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_ssm_cmpr_regs.h
 *
 * @brief ssm_cmpr registers
 *
 * This file was auto-generated by RegGen v1.3.4
 *
 */

#ifndef __AL_HAL_SSM_CMPR_REGS_H__
#define __AL_HAL_SSM_CMPR_REGS_H__

#include "al_hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_ssm_cmpr_lz_static_cfg
 **************************************************************************************************/
struct al_ssm_cmpr_lz_static_cfg {
	/* [0x0] */
	uint32_t control;
	/* [0x4] */
	uint32_t enc_history_status;
	/* [0x8] */
	uint32_t dec_history_cache_status;
	/* [0xc] */
	uint32_t dec_history_memory_status;
	/*
	 * [0x10] Value of performance counter
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_perf_status;
	/*
	 * [0x14] Value of performance counter
	 * Reset: 0x0         Access: RW
	 */
	uint32_t dec_perf_status;
	/* [0x18] */
	uint32_t memory_init;
	/*
	 * [0x1c] Masking compression and decompression interrupts and errors. Write '0' to disable
	 * the corresponding interrupt/error. Available starting at AL8/Alpha
	 * Mask of LZ interrupts and errors
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t intr_and_err_mask;
};

/**** control register ****/
/*
 * Compression engine enable
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_EN (1 << 0)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_EN_MASK 0x00000001
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_EN_SHIFT 0
/*
 * Clearing internal compression state
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CFG_CLR (1 << 1)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CFG_CLR_MASK 0x00000002
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CFG_CLR_SHIFT 1
/*
 * Clearing encoder history read pointer
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_READ_POINTER (1 << 2)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_READ_POINTER_MASK 0x00000004
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_READ_POINTER_SHIFT 2
/*
 * Clearing encoder history write pointer
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_WRITE_POINTER (1 << 3)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_WRITE_POINTER_MASK 0x00000008
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_WRITE_POINTER_SHIFT 3
/*
 * Clearing encoder history bank offset pointer
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_BANK_POINTER (1 << 4)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_BANK_POINTER_MASK 0x00000010
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_CLEAR_HISTORY_BANK_POINTER_SHIFT 4
/*
 * Enable performance counter
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_EN (1 << 5)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_EN_MASK 0x00000020
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_EN_SHIFT 5
/*
 * Reset performance counter
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_RESET (1 << 6)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_RESET_MASK 0x00000040
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_RESET_SHIFT 6
/*
 * Clear on read performance counter
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_CLEAR_ON_READ (1 << 7)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_CLEAR_ON_READ_MASK 0x00000080
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_ENC_PERF_COUNTER_CLEAR_ON_READ_SHIFT 7
/*
 * Compression engine enable
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_EN (1 << 8)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_EN_MASK 0x00000100
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_EN_SHIFT 8
/*
 * Clearing internal compression state
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CFG_CLR (1 << 9)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CFG_CLR_MASK 0x00000200
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CFG_CLR_SHIFT 9
/*
 * Clearing decoder history cache pointer
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CLEAR_CACHE_POINTER (1 << 10)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CLEAR_CACHE_POINTER_MASK 0x00000400
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CLEAR_CACHE_POINTER_SHIFT 10
/*
 * Clearing decoder history memory pointer
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CLEAR_MEMORY_POINTER (1 << 11)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CLEAR_MEMORY_POINTER_MASK 0x00000800
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_CLEAR_MEMORY_POINTER_SHIFT 11
/*
 * Enable performance counter
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_EN (1 << 12)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_EN_MASK 0x00001000
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_EN_SHIFT 12
/*
 * Reset performance counter
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_RESET (1 << 13)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_RESET_MASK 0x00002000
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_RESET_SHIFT 13
/*
 * Clear on read performance counter
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_CLEAR_ON_READ (1 << 14)
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_CLEAR_ON_READ_MASK 0x00004000
#define SSM_CMPR_LZ_STATIC_CFG_CONTROL_DEC_PERF_COUNTER_CLEAR_ON_READ_SHIFT 14

/**** enc_history_status register ****/
/*
 * History read pointer value
 * Reset: 0x0         Access: RO
 */
#define SSM_CMPR_LZ_STATIC_CFG_ENC_HISTORY_STATUS_READ_POINTER_MASK 0x000000FF
#define SSM_CMPR_LZ_STATIC_CFG_ENC_HISTORY_STATUS_READ_POINTER_SHIFT 0
/*
 * History write pointer value
 * Reset: 0x0         Access: RO
 */
#define SSM_CMPR_LZ_STATIC_CFG_ENC_HISTORY_STATUS_WRITE_POINTER_MASK 0x0000FF00
#define SSM_CMPR_LZ_STATIC_CFG_ENC_HISTORY_STATUS_WRITE_POINTER_SHIFT 8
/*
 * History bank offset pointer value
 * Reset: 0x0         Access: RO
 */
#define SSM_CMPR_LZ_STATIC_CFG_ENC_HISTORY_STATUS_BANK_POINTER_MASK 0x00FF0000
#define SSM_CMPR_LZ_STATIC_CFG_ENC_HISTORY_STATUS_BANK_POINTER_SHIFT 16

/**** dec_history_cache_status register ****/
/*
 * History cache pointer value
 * Reset: 0x0         Access: RO
 */
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_CACHE_STATUS_POINTER_MASK 0x000000FF
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_CACHE_STATUS_POINTER_SHIFT 0
/*
 * History cache byte offset value
 * Reset: 0x0         Access: RO
 */
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_CACHE_STATUS_OFFSET_MASK 0x0000FF00
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_CACHE_STATUS_OFFSET_SHIFT 8

/**** dec_history_memory_status register ****/
/*
 * History memory pointer value
 * Reset: 0x0         Access: RO
 */
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_MEMORY_STATUS_POINTER_MASK 0x0000FFFF
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_MEMORY_STATUS_POINTER_SHIFT 0
/*
 * History memory byte offset value
 * Reset: 0x0         Access: RO
 */
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_MEMORY_STATUS_OFFSET_MASK 0x00FF0000
#define SSM_CMPR_LZ_STATIC_CFG_DEC_HISTORY_MEMORY_STATUS_OFFSET_SHIFT 16

/**** memory_init register ****/
/*
 * Skipping memory initialization for compression memories
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_MEMORY_INIT_SKIP (1 << 0)
#define SSM_CMPR_LZ_STATIC_CFG_MEMORY_INIT_SKIP_MASK 0x00000001
#define SSM_CMPR_LZ_STATIC_CFG_MEMORY_INIT_SKIP_SHIFT 0
/*
 * Triggering memory initialization for compression memories
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_STATIC_CFG_MEMORY_INIT_TRIGGER (1 << 1)
#define SSM_CMPR_LZ_STATIC_CFG_MEMORY_INIT_TRIGGER_MASK 0x00000002
#define SSM_CMPR_LZ_STATIC_CFG_MEMORY_INIT_TRIGGER_SHIFT 1

/**************************************************************************************************
 * al_ssm_cmpr_lz_algorithm
 **************************************************************************************************/
struct al_ssm_cmpr_lz_algorithm {
	/* [0x0] */
	uint32_t entry_alg;
	/* [0x4] */
	uint32_t flags_offset;
	/*
	 * [0x8] Location of first encoded section with regards to the code words
	 * Reset: 0x0         Access: RW
	 */
	uint32_t flags_pos_0;
	/*
	 * [0xc] Location of second encoded section with regards to the code words
	 * Reset: 0x0         Access: RW
	 */
	uint32_t flags_pos_1;
	/*
	 * [0x10] Location of third encoded section with regards to the code words
	 * Reset: 0x0         Access: RW
	 */
	uint32_t flags_pos_2;
	/*
	 * [0x14] Location of fourth encoded section with regards to the code words
	 * Reset: 0x0         Access: RW
	 */
	uint32_t flags_pos_3;
	/* [0x18] */
	uint32_t flags_cfg;
	/* [0x1c] */
	uint32_t cmprs_form;
};

/**** entry_alg register ****/
/*
 * Algorithm table ID
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_ENTRY_ALG_ID_MASK 0x0000000F
#define SSM_CMPR_LZ_ALGORITHM_ENTRY_ALG_ID_SHIFT 0

/**** flags_offset register ****/
/*
 * Byte offset for fourth encoded section
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_3_MASK 0x000000FF
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_3_SHIFT 0
/*
 * Byte offset for third encoded section
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_2_MASK 0x0000FF00
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_2_SHIFT 8
/*
 * Byte offset for second encoded section
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_1_MASK 0x00FF0000
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_1_SHIFT 16
/*
 * Byte offset for first encoded section
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_0_MASK 0xFF000000
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_OFFSET_OFFSET_0_SHIFT 24

/**** flags_cfg register ****/
/*
 * Value of encoded code word indication
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_COMPRESSED_POLARITY (1 << 0)
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_COMPRESSED_POLARITY_MASK 0x00000001
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_COMPRESSED_POLARITY_SHIFT 0
/*
 * Use flags for this algorithm
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_ENABLE (1 << 1)
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_ENABLE_MASK 0x00000002
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_ENABLE_SHIFT 1
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_RESERVED_31_2_MASK 0xFFFFFFFC
#define SSM_CMPR_LZ_ALGORITHM_FLAGS_CFG_RESERVED_31_2_SHIFT 2

/**** cmprs_form register ****/
/*
 * Algorithm type : 2'b00 - LZ code word based algorithm (LZ77, LZSS). 2'b01 - LZ stream based
 * algorithm (LZ4). 2'b10 - Static Deflate. 2'b11 - Reserved.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_ALGORITHM_TYPE_MASK 0x00000003
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_ALGORITHM_TYPE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_RESERVED_3_2_MASK 0x0000000C
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_RESERVED_3_2_SHIFT 2
/*
 * A bit specifying whether offset starts from 0 or 1
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_OFFSET_BASE (1 << 4)
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_OFFSET_BASE_MASK 0x00000010
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_OFFSET_BASE_SHIFT 4
/*
 * 0 - Big Endian. 1 - Little Endian.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_OFFSET_ENDIANITY (1 << 5)
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_OFFSET_ENDIANITY_MASK 0x00000020
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_OFFSET_ENDIANITY_SHIFT 5
/*
 * 0 - Huffman extra bits are msb-to-lsb aligned. 1 - Huffman extra bits are lsb-to-msb aligned.
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_HUFFMAN_EXTRA_BITS_SWAP (1 << 6)
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_HUFFMAN_EXTRA_BITS_SWAP_MASK 0x00000040
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_HUFFMAN_EXTRA_BITS_SWAP_SHIFT 6
/*
 * when asserted, bit-swap is performed for every byte on the compressed data
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_BIT_SWAP (1 << 7)
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_BIT_SWAP_MASK 0x00000080
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_BIT_SWAP_SHIFT 7
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_RESERVED_31_8_MASK 0xFFFFFF00
#define SSM_CMPR_LZ_ALGORITHM_CMPRS_FORM_RESERVED_31_8_SHIFT 8

/**************************************************************************************************
 * al_ssm_cmpr_lz_enc_profile
 **************************************************************************************************/
struct al_ssm_cmpr_lz_enc_profile {
	/* [0x0] */
	uint32_t entry_enc_profile;
	/* [0x4] */
	uint32_t cfg_enc_profile;
	/* [0x8] */
	uint32_t thresholds_enc_profile;
	/* [0xc] */
	uint32_t eop_policy_profile;
};

/**** entry_enc_profile register ****/
/*
 * Profile table ID
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_ENTRY_ENC_PROFILE_ID_MASK 0x0000003F
#define SSM_CMPR_LZ_ENC_PROFILE_ENTRY_ENC_PROFILE_ID_SHIFT 0

/**** cfg_enc_profile register ****/
/*
 * History size used for compression in 256B resolution. History of 256[B] and 512*K[B] for
 * K=1,...,64 are supported.
 * Reset: 0x8         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_HISTORY_SIZE_MASK 0x000000FF
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_HISTORY_SIZE_SHIFT 0
/*
 * The profile algorithm index
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_ALGORITHM_INDEX_MASK 0x00000F00
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_ALGORITHM_INDEX_SHIFT 8
/*
 * A internal optimization scheme of compression
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_CMPRS_OPTIMIZER_EN (1 << 12)
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_CMPRS_OPTIMIZER_EN_MASK 0x00001000
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_CMPRS_OPTIMIZER_EN_SHIFT 12
/*
 * A bit indicating that packet with relevant ID should not be encoded regardless of the output
 * controller index
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_FORCE_ORIGINAL_OUT (1 << 13)
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_FORCE_ORIGINAL_OUT_MASK 0x00002000
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_FORCE_ORIGINAL_OUT_SHIFT 13
/*
 * A bit indicating that packet with relevant ID should be encoded regardless of the output
 * controller index
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_FORCE_ENCODED_OUT (1 << 14)
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_FORCE_ENCODED_OUT_MASK 0x00004000
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_FORCE_ENCODED_OUT_SHIFT 14
/*
 * LSBs of output controller index arbitrating between the original and encoded data according to
 * the compression quality. This will be the full index in use up to AL7
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_OUT_CNTRL_IDX_LSBS_MASK 0x00018000
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_OUT_CNTRL_IDX_LSBS_SHIFT 15
/*
 * Adding next symbol to a compressed code word that is described with offset and length. Required
 * for LZ77.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_CONCAT_NEXT_SYMBOL (1 << 17)
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_CONCAT_NEXT_SYMBOL_MASK 0x00020000
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_CONCAT_NEXT_SYMBOL_SHIFT 17
/*
 * MSBs of output controller index arbitrating between the original and encoded data according to
 * the compression quality. Available starting at Alpha/AL8
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_OUT_CNTRL_IDX_MSBS_MASK 0x003C0000
#define SSM_CMPR_LZ_ENC_PROFILE_CFG_ENC_PROFILE_OUT_CNTRL_IDX_MSBS_SHIFT 18

/**** thresholds_enc_profile register ****/
/*
 * The maximal match to be encoded
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_THRESHOLDS_ENC_PROFILE_MAX_MASK 0x0000FFFF
#define SSM_CMPR_LZ_ENC_PROFILE_THRESHOLDS_ENC_PROFILE_MAX_SHIFT 0
/*
 * The minimal match to be encoded
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_THRESHOLDS_ENC_PROFILE_MIN_MASK 0x00FF0000
#define SSM_CMPR_LZ_ENC_PROFILE_THRESHOLDS_ENC_PROFILE_MIN_SHIFT 16
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_ENC_PROFILE_THRESHOLDS_ENC_PROFILE_RESERVED_31_24_MASK 0xFF000000
#define SSM_CMPR_LZ_ENC_PROFILE_THRESHOLDS_ENC_PROFILE_RESERVED_31_24_SHIFT 24

/**** eop_policy_profile register ****/
/*
 * The last N bytes within a new compressed code word cannot begin
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_EOP_POLICY_PROFILE_NO_MATCH_LENGTH_MASK 0x000000FF
#define SSM_CMPR_LZ_ENC_PROFILE_EOP_POLICY_PROFILE_NO_MATCH_LENGTH_SHIFT 0
/*
 * The last N bytes that would not be compressed
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_ENC_PROFILE_EOP_POLICY_PROFILE_UNCOMPRESSED_LENGTH_MASK 0x0000FF00
#define SSM_CMPR_LZ_ENC_PROFILE_EOP_POLICY_PROFILE_UNCOMPRESSED_LENGTH_SHIFT 8
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_ENC_PROFILE_EOP_POLICY_PROFILE_RESERVED_31_16_MASK 0xFFFF0000
#define SSM_CMPR_LZ_ENC_PROFILE_EOP_POLICY_PROFILE_RESERVED_31_16_SHIFT 16

/**************************************************************************************************
 * al_ssm_cmpr_lz_dec_profile
 **************************************************************************************************/
struct al_ssm_cmpr_lz_dec_profile {
	/* [0x0] */
	uint32_t entry_dec_profile;
	/* [0x4] */
	uint32_t cfg;
	/* [0x8] */
	uint32_t alg;
};

/**** entry_dec_profile register ****/
/*
 * Profile table ID
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ENTRY_DEC_PROFILE_ID_MASK 0x0000003F
#define SSM_CMPR_LZ_DEC_PROFILE_ENTRY_DEC_PROFILE_ID_SHIFT 0

/**** cfg register ****/
/*
 * History size used for decompression in 256B resolution. History of 256[B] and 512*K[B] for
 * K=1,...,64 are supported.
 * Reset: 0x8         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_HISTORY_SIZE_MASK 0x000000FF
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_HISTORY_SIZE_SHIFT 0
/*
 * The minimal match length of encoded sequence
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_MATCH_LENGTH_BASE_MASK 0x0000FF00
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_MATCH_LENGTH_BASE_SHIFT 8
/*
 * A bit indicating that packet with relevant ID is not encoded
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_FORCE_ORIGINAL_OUT (1 << 16)
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_FORCE_ORIGINAL_OUT_MASK 0x00010000
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_FORCE_ORIGINAL_OUT_SHIFT 16
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_RESERVED_31_17_MASK 0xFFFE0000
#define SSM_CMPR_LZ_DEC_PROFILE_CFG_RESERVED_31_17_SHIFT 17

/**** alg register ****/
/*
 * Flag field polarity of a bit specifying that the following data field is encoded
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_COMPRESSED_POLARITY (1 << 0)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_COMPRESSED_POLARITY_MASK 0x00000001
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_COMPRESSED_POLARITY_SHIFT 0
/*
 * A bit indicating whether a flag indication is used
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_ENABLE (1 << 1)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_ENABLE_MASK 0x00000002
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_ENABLE_SHIFT 1
/*
 * 0 - Reserved. 1 - Byte coalescing. 2 - Half word coalescing. 3 - Word coalescing
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_COALESCING_MASK 0x0000000C
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FLAG_COALESCING_SHIFT 2
/*
 * 0 - Offset is encoded with 1 byte. 1 - Offset is encoded in 2 bytes.
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_OFFSET_SIZE (1 << 4)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_OFFSET_SIZE_MASK 0x00000010
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_OFFSET_SIZE_SHIFT 4
/*
 * 0 - Length is encoded with 1 byte. 1 - Length is encoded in 2 bytes.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_LENGTH_SIZE (1 << 5)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_LENGTH_SIZE_MASK 0x00000020
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_LENGTH_SIZE_SHIFT 5
/*
 * The encoded field ordering. 0 - (offset, length, symbol). 1 - (offset, symbol, length). 2 -
 * (length, offset, symbol). 3 - (length, symbol, offset). 4 - (symbol, offset, length). 5 -
 * (symbol, length, offset)
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_COMPOSITION_MASK 0x000001C0
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_FIELD_COMPOSITION_SHIFT 6
/*
 * Algorithm type : 2'b00 - LZ code word based algorithm (LZ77, LZSS). 2'b01 - LZ stream based
 * algorithm (LZ4). 2'b10 - Static Deflate. 2'b11 - Dynamic Deflate.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_ALGORITHM_TYPE_MASK 0x00000600
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_ALGORITHM_TYPE_SHIFT 9
/*
 * Compressed code word indication also includes next symbol. Required for LZ77.
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_CONCAT_NEXT_SYMBOL (1 << 11)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_CONCAT_NEXT_SYMBOL_MASK 0x00000800
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_CONCAT_NEXT_SYMBOL_SHIFT 11
/*
 * A bit specifying whether offset starts from 0 or 1
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_OFFSET_BASE (1 << 12)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_OFFSET_BASE_MASK 0x00001000
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_OFFSET_BASE_SHIFT 12
/*
 * 0 - Big Endian. 1 - Little Endian.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_OFFSET_ENDIANITY (1 << 13)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_OFFSET_ENDIANITY_MASK 0x00002000
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_OFFSET_ENDIANITY_SHIFT 13
/*
 * 0 - Huffman extra bits are msb-to-lsb aligned. 1 - Huffman extra bits are lsb-to-msb aligned.
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_HUFFMAN_EXTRA_BITS_SWAP (1 << 14)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_HUFFMAN_EXTRA_BITS_SWAP_MASK 0x00004000
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_HUFFMAN_EXTRA_BITS_SWAP_SHIFT 14
/*
 * when asserted, bit-swap is performed for every byte on the compressed data
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_BIT_SWAP (1 << 15)
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_BIT_SWAP_MASK 0x00008000
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_BIT_SWAP_SHIFT 15
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_RESERVED_31_16_MASK 0xFFFF0000
#define SSM_CMPR_LZ_DEC_PROFILE_ALG_RESERVED_31_16_SHIFT 16

/**************************************************************************************************
 * al_ssm_cmpr_lz_format
 **************************************************************************************************/
struct al_ssm_cmpr_lz_format {
	/* [0x0] */
	uint32_t entry_format;
	/* [0x4] */
	uint32_t offset;
	/*
	 * [0x8] ALU symbol0 data
	 * Reset: 0x0         Access: RW
	 */
	uint32_t alu_symbol_0;
	/*
	 * [0xc] ALU symbol1 data
	 * Reset: 0x0         Access: RW
	 */
	uint32_t alu_symbol_1;
	/*
	 * [0x10] ALU length0 data
	 * Reset: 0x0         Access: RW
	 */
	uint32_t alu_length_0;
	/*
	 * [0x14] ALU length1 data
	 * Reset: 0x0         Access: RW
	 */
	uint32_t alu_length_1;
	/*
	 * [0x18] ALU offset0 data
	 * Reset: 0x0         Access: RW
	 */
	uint32_t alu_offset_0;
	/*
	 * [0x1c] ALU offset1 data
	 * Reset: 0x0         Access: RW
	 */
	uint32_t alu_offset_1;
	/* [0x20] */
	uint32_t cfg_format;
};

/**** entry_format register ****/
/*
 * Format table ID
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_ENTRY_FORMAT_ID_MASK 0x00000007
#define SSM_CMPR_LZ_FORMAT_ENTRY_FORMAT_ID_SHIFT 0

/**** offset register ****/
/*
 * Code Words 0-7 offset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_0_7_MASK 0x000000FF
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_0_7_SHIFT 0
/*
 * Code Words 8-15 offset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_8_15_MASK 0x0000FF00
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_8_15_SHIFT 8
/*
 * Code Words 16-23 offset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_16_23_MASK 0x00FF0000
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_16_23_SHIFT 16
/*
 * Code Words 24-31 offset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_24_31_MASK 0xFF000000
#define SSM_CMPR_LZ_FORMAT_OFFSET_CODE_WORDS_24_31_SHIFT 24

/**** cfg_format register ****/
/*
 * ALU symbol0 command
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_SYMBOL_0_MASK 0x0000000F
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_SYMBOL_0_SHIFT 0
/*
 * ALU symbol1 command
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_SYMBOL_1_MASK 0x000000F0
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_SYMBOL_1_SHIFT 4
/*
 * ALU length0 command
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_LENGTH_0_MASK 0x00000F00
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_LENGTH_0_SHIFT 8
/*
 * ALU length1 command
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_LENGTH_1_MASK 0x0000F000
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_LENGTH_1_SHIFT 12
/*
 * ALU offset1 command
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_OFFSET_0_MASK 0x000F0000
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_OFFSET_0_SHIFT 16
/*
 * ALU offset1 command
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_OFFSET_1_MASK 0x00F00000
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_CMD_ALU_OFFSET_1_SHIFT 20
/* Reset: 0x4         Access: RW */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_FIELD_BYTE_COUNT_MASK 0x07000000
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_FIELD_BYTE_COUNT_SHIFT 24
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_RESERVED_31_27_MASK 0xF8000000
#define SSM_CMPR_LZ_FORMAT_CFG_FORMAT_RESERVED_31_27_SHIFT 27

/**************************************************************************************************
 * al_ssm_cmpr_lz_cam
 **************************************************************************************************/
struct al_ssm_cmpr_lz_cam {
	/* [0x0] */
	uint32_t entry_cam;
	/* [0x4] */
	uint32_t cfg_cam;
	/* [0x8] */
	uint32_t threshold_cam;
};

/**** entry_cam register ****/
/*
 * CAM entry id
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_CAM_ENTRY_CAM_ID_MASK 0x0000000F
#define SSM_CMPR_LZ_CAM_ENTRY_CAM_ID_SHIFT 0

/**** cfg_cam register ****/
/*
 * The format table to be used for encoding
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_CAM_CFG_CAM_FORMAT_TABLE_INDEX_MASK 0x0000000F
#define SSM_CMPR_LZ_CAM_CFG_CAM_FORMAT_TABLE_INDEX_SHIFT 0
/*
 * Algorithm condition
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_CAM_CFG_CAM_ALGORITHM_INDEX_MASK 0x000000F0
#define SSM_CMPR_LZ_CAM_CFG_CAM_ALGORITHM_INDEX_SHIFT 4
/*
 * Compressed symbol condition enabled
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_CAM_CFG_CAM_COMPRESSED_SYMBOL_EN (1 << 8)
#define SSM_CMPR_LZ_CAM_CFG_CAM_COMPRESSED_SYMBOL_EN_MASK 0x00000100
#define SSM_CMPR_LZ_CAM_CFG_CAM_COMPRESSED_SYMBOL_EN_SHIFT 8
/*
 * Compressed symbol condition
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_CAM_CFG_CAM_COMPRESSED_SYMBOL (1 << 9)
#define SSM_CMPR_LZ_CAM_CFG_CAM_COMPRESSED_SYMBOL_MASK 0x00000200
#define SSM_CMPR_LZ_CAM_CFG_CAM_COMPRESSED_SYMBOL_SHIFT 9
/*
 * Search CAM entry according to length (1)/offset (0)
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_CAM_CFG_CAM_MATCH_LENGTH_OFFSET_SEL (1 << 10)
#define SSM_CMPR_LZ_CAM_CFG_CAM_MATCH_LENGTH_OFFSET_SEL_MASK 0x00000400
#define SSM_CMPR_LZ_CAM_CFG_CAM_MATCH_LENGTH_OFFSET_SEL_SHIFT 10
/*
 * Entry valid indication
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_CAM_CFG_CAM_CAM_ENTRY_VALID (1 << 11)
#define SSM_CMPR_LZ_CAM_CFG_CAM_CAM_ENTRY_VALID_MASK 0x00000800
#define SSM_CMPR_LZ_CAM_CFG_CAM_CAM_ENTRY_VALID_SHIFT 11
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_CAM_CFG_CAM_RESERVED_31_12_MASK 0xFFFFF000
#define SSM_CMPR_LZ_CAM_CFG_CAM_RESERVED_31_12_SHIFT 12

/**** threshold_cam register ****/
/*
 * Minimal length/offset threshold
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_CAM_THRESHOLD_CAM_MIN_CODE_THRESHOLD_MASK 0x0000FFFF
#define SSM_CMPR_LZ_CAM_THRESHOLD_CAM_MIN_CODE_THRESHOLD_SHIFT 0
/*
 * Maximal length/offset threshold
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_CAM_THRESHOLD_CAM_MAX_CODE_THRESHOLD_MASK 0xFFFF0000
#define SSM_CMPR_LZ_CAM_THRESHOLD_CAM_MAX_CODE_THRESHOLD_SHIFT 16

/**************************************************************************************************
 * al_ssm_cmpr_lz_decoder_history_stat
 **************************************************************************************************/
struct al_ssm_cmpr_lz_decoder_history_stat {
	/* [0x0] */
	uint32_t counter_control;
	/*
	 * [0x4] Multiple (> 1) access to history domain 4KB - 32KB
	 * Reset: 0x0         Access: RW
	 */
	uint32_t mca_sram;
	/*
	 * [0x8] Multiple (> 2) access to history domain 1KB - 4KB
	 * Reset: 0x0         Access: RW
	 */
	uint32_t mca_large_cache;
	/*
	 * [0xc] Multiple (> 8) access to history domain 1B - 1KB
	 * Reset: 0x0         Access: RW
	 */
	uint32_t mca_small_cache;
	/*
	 * [0x10] Accumulated code words reading more than 64B from history
	 * Reset: 0x0         Access: RW
	 */
	uint32_t lsrh;
	/*
	 * [0x14] Single code words reading more than 64B from history
	 * Reset: 0x0         Access: RW
	 */
	uint32_t larh;
	/*
	 * [0x18] Number of processed code words bits [63:32]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t code_word_counter_msb;
	/*
	 * [0x1c] Number of processed code words bits [31:0]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t code_word_counter_lsb;
};

/**** counter_control register ****/
/*
 * Enable performance counter
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_ENABLE (1 << 0)
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_ENABLE_MASK 0x00000001
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_ENABLE_SHIFT 0
/*
 * Reset performance counter
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_RESET (1 << 1)
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_RESET_MASK 0x00000002
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_RESET_SHIFT 1
/*
 * Clear on read performance counter
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_CLEAR_ON_READ (1 << 2)
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_CLEAR_ON_READ_MASK 0x00000004
#define SSM_CMPR_LZ_DECODER_HISTORY_STAT_COUNTER_CONTROL_CLEAR_ON_READ_SHIFT 2

/**************************************************************************************************
 * al_ssm_cmpr_lz_output_arbiter
 *
 * LZ encoder output arbitration configuration
 **************************************************************************************************/
struct al_ssm_cmpr_lz_output_arbiter {
	/* [0x0] Index for output arbitration configuration */
	uint32_t entry_out_arb;
	/* [0x4] ALU consts 0,1 */
	uint32_t alu_const_reg_0;
	/* [0x8] ALU consts 2,3 */
	uint32_t alu_const_reg_1;
	/* [0xc] ALU consts 4,5 - Available starting at AL8/Alpha */
	uint32_t alu_const_reg_2;
	/* [0x10] First stage ALU MUXs - Available starting at AL8/Alpha */
	uint32_t alu_mux_stage_1;
	/* [0x14] Second stage ALU MUXs - Available starting at AL8/Alpha */
	uint32_t alu_mux_stage_2;
	/* [0x18] First stage ALU opcodes - Available starting at AL8/Alpha */
	uint32_t alu_opcode_stage_1;
	/* [0x1c] Second stage ALU opcodes - Available starting at AL8/Alpha */
	uint32_t alu_opcode_stage_2;
	/* [0x20] Configuration of output arbitration - Available starting at AL8/Alpha */
	uint32_t cfg_out_arb;
};

/**** entry_out_arb register ****/
/*
 * Output table ID
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ENTRY_OUT_ARB_ID_MASK 0x0000003F
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ENTRY_OUT_ARB_ID_SHIFT 0

/**** alu_const_reg_0 register ****/
/*
 * Data for ALU
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_0_CONST0_MASK 0x0000FFFF
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_0_CONST0_SHIFT 0
/*
 * Data for ALU
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_0_CONST1_MASK 0xFFFF0000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_0_CONST1_SHIFT 16

/**** alu_const_reg_1 register ****/
/*
 * Data for ALU
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_1_CONST2_MASK 0x0000FFFF
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_1_CONST2_SHIFT 0
/*
 * Data for ALU
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_1_CONST3_MASK 0xFFFF0000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_1_CONST3_SHIFT 16

/**** alu_const_reg_2 register ****/
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_2_CONST4_MASK 0x0000FFFF
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_2_CONST4_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_2_CONST5_MASK 0xFFFF0000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_CONST_REG_2_CONST5_SHIFT 16

/**** alu_mux_stage_1 register ****/
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_0_MASK 0x0000000F
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_0_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_1_MASK 0x000000F0
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_1_SHIFT 4
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_2_MASK 0x00000F00
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_2_SHIFT 8
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_3_MASK 0x0000F000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_0_MUX_3_SHIFT 12
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_0_MASK 0x000F0000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_0_SHIFT 16
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_1_MASK 0x00F00000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_1_SHIFT 20
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_2_MASK 0x0F000000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_2_SHIFT 24
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_3_MASK 0xF0000000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_1_ALU_1_MUX_3_SHIFT 28

/**** alu_mux_stage_2 register ****/
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_0_MASK 0x0000000F
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_0_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_1_MASK 0x000000F0
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_1_SHIFT 4
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_2_MASK 0x00000F00
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_2_SHIFT 8
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_3_MASK 0x0000F000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_MUX_STAGE_2_ALU_MUX_3_SHIFT 12

/**** alu_opcode_stage_1 register ****/
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_0_OPCODE_0_MASK 0x0000000F
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_0_OPCODE_0_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_0_OPCODE_1_MASK 0x000000F0
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_0_OPCODE_1_SHIFT 4
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_0_OPCODE_2_MASK 0x00000F00
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_0_OPCODE_2_SHIFT 8
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_1_OPCODE_0_MASK 0x0000F000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_1_OPCODE_0_SHIFT 12
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_1_OPCODE_1_MASK 0x000F0000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_1_OPCODE_1_SHIFT 16
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_1_OPCODE_2_MASK 0x00F00000
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_1_ALU_1_OPCODE_2_SHIFT 20

/**** alu_opcode_stage_2 register ****/
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_2_ALU_OPCODE_0_MASK 0x0000000F
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_2_ALU_OPCODE_0_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_2_ALU_OPCODE_1_MASK 0x000000F0
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_2_ALU_OPCODE_1_SHIFT 4
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_2_ALU_OPCODE_2_MASK 0x00000F00
#define SSM_CMPR_LZ_OUTPUT_ARBITER_ALU_OPCODE_STAGE_2_ALU_OPCODE_2_SHIFT 8

/**** cfg_out_arb register ****/
/*
 * Compressing (1) or not (0) the packet if result of ALUs is negative
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_NEGATIVE_RES_MUX (1 << 0)
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_NEGATIVE_RES_MUX_MASK 0x00000001
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_NEGATIVE_RES_MUX_SHIFT 0
/*
 * Compressing (1) or not (0) the packet if result of ALUs is positive
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_POSITIVE_RES_MUX (1 << 1)
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_POSITIVE_RES_MUX_MASK 0x00000002
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_POSITIVE_RES_MUX_SHIFT 1
/*
 * Compressing (1) or not (0) the packet if result of ALUs is zero
 * Reset: 0x1         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_ZERO_RES_MUX (1 << 2)
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_ZERO_RES_MUX_MASK 0x00000004
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_ZERO_RES_MUX_SHIFT 2
/*
 * 2'b00 : Output Buffer If Over Threshold - If compression ratio is sufficient, send the entire
 * compressed buffer. Otherwise, send the entire original buffer.
 * 2'b01 : Drop Buffer If Over Threshold - If compression ratio is sufficient, send the entire
 * compressed buffer. Otherwise, drop the buffer.
 * 2'b10 : Trim Buffer If Over Threshold - If compression ratio is sufficient, send the entire
 * compressed buffer. Otherwise, send the compressed buffer until reaching the threshold.
 * 2'b11 : Not supported
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_POST_DECISION_MASK 0x00000018
#define SSM_CMPR_LZ_OUTPUT_ARBITER_CFG_OUT_ARB_ALU_POST_DECISION_SHIFT 3

/**************************************************************************************************
 * al_ssm_cmpr_huffman_static_table
 **************************************************************************************************/
struct al_ssm_cmpr_huffman_static_table {
	/* [0x0] */
	uint32_t entry;
	/* [0x4] */
	uint32_t value;
	/* [0x8] */
	uint32_t alphabet;
};

/**** entry register ****/
/*
 * 0-255 : Literal entries. 256 : End-of-buffer entry. 257-285 : Length entries. 286-315 : Offset
 * entries.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ENTRY_ID_MASK 0x000001FF
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ENTRY_ID_SHIFT 0

/**** value register ****/
/*
 * The distance range for the encoded entry. Irrelevant for literal and end-of-buffer entries
 * whereas dist==entry_id. For length entries only 9 lsb bits are used.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_VALUE_DIST_MASK 0x00007FFF
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_VALUE_DIST_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_VALUE_RESERVED_31_15_MASK 0xFFFF8000
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_VALUE_RESERVED_31_15_SHIFT 15

/**** alphabet register ****/
/*
 * The Huffman coding for entry with appropriate distance.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_CODE_MASK 0x00007FFF
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_CODE_SHIFT 0
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_RESERVED_15_15 (1 << 15)
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_RESERVED_15_15_MASK 0x00008000
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_RESERVED_15_15_SHIFT 15
/*
 * Huffman code length. The code should be lsb aligned for partial length.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_LENGTH_MASK 0x000F0000
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_LENGTH_SHIFT 16
/*
 * Extra bits following the code found in the stream, used to determine the exact value. Irrelevant
 * for literal and end-of-buffer entries whereas extra_bits==0.
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_EXTRA_BITS_MASK 0x00F00000
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_EXTRA_BITS_SHIFT 20
/* Reset: 0x0         Access: RW */
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_RESERVED_31_24_MASK 0xFF000000
#define SSM_CMPR_HUFFMAN_STATIC_TABLE_ALPHABET_RESERVED_31_24_SHIFT 24

/**************************************************************************************************
 * al_ssm_cmpr_lz_packet_stat
 *
 * Compression and Decompression performance counters - Available starting at AL8/Alpha
 **************************************************************************************************/
struct al_ssm_cmpr_lz_packet_stat {
	/*
	 * [0x0] Compression - number of uncompressed bytes received - most significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_orig_bytes_cntr_msb;
	/*
	 * [0x4] Compression - number of uncompressed bytes received - least significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_orig_bytes_cntr_lsb;
	/*
	 * [0x8] Compression - number of compressed bytes sent - most significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_comp_bytes_cntr_msb;
	/*
	 * [0xc] Compression - number of compressed bytes sent - least significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_comp_bytes_cntr_lsb;
	/*
	 * [0x10] Compression - number of original, uncompressed packets sent
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_orig_pkt_cntr;
	/*
	 * [0x14] Compression - number of successfully compressed packets sent
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_comp_pkt_cntr;
	/*
	 * [0x18] Compression - number of compressed packets dropped
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_drop_pkt_cntr;
	/*
	 * [0x1c] Compression - number of trimmed compressed packets sent
	 * Reset: 0x0         Access: RW
	 */
	uint32_t enc_trim_pkt_cntr;
	/*
	 * [0x20] Decompression - number of uncompressed bytes sent - most significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t dec_orig_bytes_cntr_msb;
	/*
	 * [0x24] Decompression - number of uncompressed bytes sent - least significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t dec_orig_bytes_cntr_lsb;
	/*
	 * [0x28] Decompression - number of compressed bytes received - most significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t dec_comp_bytes_cntr_msb;
	/*
	 * [0x2c] Decompression - number of compressed bytes received - least significant bytes
	 * Reset: 0x0         Access: RW
	 */
	uint32_t dec_comp_bytes_cntr_lsb;
	/* [0x30] Control for all packet statistics counters */
	uint32_t control;
};

/**** control register ****/
/*
 * Compression compressed packets trimmed counter enable
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_EN (1 << 0)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_EN_MASK 0x00000001
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_EN_SHIFT 0
/*
 * Compression compressed packets trimmed counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_RESET (1 << 1)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_RESET_MASK 0x00000002
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_RESET_SHIFT 1
/*
 * Compression compressed packets trimmed counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_CLR_ON_RD (1 << 2)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_CLR_ON_RD_MASK 0x00000004
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_TRIM_PKTS_CLR_ON_RD_SHIFT 2
/*
 * Compression compressed packets dropped counter enable
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_EN (1 << 3)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_EN_MASK 0x00000008
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_EN_SHIFT 3
/*
 * Compression compressed packets dropped counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_RESET (1 << 4)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_RESET_MASK 0x00000010
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_RESET_SHIFT 4
/*
 * Compression compressed packets dropped counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_CLR_ON_RD (1 << 5)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_CLR_ON_RD_MASK 0x00000020
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_DROP_PKTS_CLR_ON_RD_SHIFT 5
/*
 * Compression original packets sent counter enable
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_EN (1 << 6)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_EN_MASK 0x00000040
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_EN_SHIFT 6
/*
 * Compression original packets sent counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_RESET (1 << 7)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_RESET_MASK 0x00000080
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_RESET_SHIFT 7
/*
 * Compression original packets sent counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_CLR_ON_RD (1 << 8)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_CLR_ON_RD_MASK 0x00000100
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_PKTS_CLR_ON_RD_SHIFT 8
/*
 * Compression successfully compressed packets counter en
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_EN (1 << 9)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_EN_MASK 0x00000200
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_EN_SHIFT 9
/*
 * Compression successfully compressed packets counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_RESET (1 << 10)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_RESET_MASK 0x00000400
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_RESET_SHIFT 10
/*
 * Compression successfully compressed packets counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_CLR_ON_RD (1 << 11)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_CLR_ON_RD_MASK 0x00000800
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_PKTS_CLR_ON_RD_SHIFT 11
/*
 * Compression compressed bytes counter enable
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_EN (1 << 12)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_EN_MASK 0x00001000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_EN_SHIFT 12
/*
 * Compression compressed bytes counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_RESET (1 << 13)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_RESET_MASK 0x00002000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_RESET_SHIFT 13
/*
 * Compression compressed bytes counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_CLR_ON_RD (1 << 14)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_CLR_ON_RD_MASK 0x00004000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_COMP_BYTES_CLR_ON_RD_SHIFT 14
/*
 * Compression uncompressed bytes counter enable
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_EN (1 << 15)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_EN_MASK 0x00008000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_EN_SHIFT 15
/*
 * Compression uncompressed bytes counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_RESET (1 << 16)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_RESET_MASK 0x00010000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_RESET_SHIFT 16
/*
 * Compression uncompressed bytes counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_CLR_ON_RD (1 << 17)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_CLR_ON_RD_MASK 0x00020000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_ENC_ORIG_BYTES_CLR_ON_RD_SHIFT 17
/*
 * Decompression compressed bytes counter enable
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_EN (1 << 18)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_EN_MASK 0x00040000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_EN_SHIFT 18
/*
 * Decompression compressed bytes counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_RESET (1 << 19)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_RESET_MASK 0x00080000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_RESET_SHIFT 19
/*
 * Decompression compressed bytes counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_CLR_ON_RD (1 << 20)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_CLR_ON_RD_MASK 0x00100000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_COMP_BYTES_CLR_ON_RD_SHIFT 20
/*
 * Decompression uncompressed bytes counter enable
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_EN (1 << 21)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_EN_MASK 0x00200000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_EN_SHIFT 21
/*
 * Decompression uncompressed bytes counter reset
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_RESET (1 << 22)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_RESET_MASK 0x00400000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_RESET_SHIFT 22
/*
 * Decompression uncompressed bytes counter clear on read
 * Reset: 0x0         Access: RW
 */
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_CLR_ON_RD (1 << 23)
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_CLR_ON_RD_MASK 0x00800000
#define SSM_CMPR_LZ_PACKET_STAT_CONTROL_DEC_ORIG_BYTES_CLR_ON_RD_SHIFT 23

/**************************************************************************************************
 * al_ssm_cmpr_version
 *
 * Compression version
 **************************************************************************************************/
struct al_ssm_cmpr_version {
	/*
	 * [0x0]
	 * Reset: 0x2         Access: RO
	 */
	uint32_t revision;
};

/**************************************************************************************************
 * al_ssm_cmpr_spare
 *
 * Spare Registers
 **************************************************************************************************/
struct al_ssm_cmpr_spare {
	/*
	 * [0x0]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t generate_1;
	/*
	 * [0x4]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t generate_2;
	/*
	 * [0x8]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t generate_3;
	/*
	 * [0xc]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t generate_4;
	/*
	 * [0x10]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t transmit_1;
	/*
	 * [0x14]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t transmit_2;
	/*
	 * [0x18]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t transmit_3;
	/*
	 * [0x1c]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t transmit_4;
	/*
	 * [0x20]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t parse_1;
	/*
	 * [0x24]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t parse_2;
	/*
	 * [0x28]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t parse_3;
	/*
	 * [0x2c]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t parse_4;
	/*
	 * [0x30]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t extract_1;
	/*
	 * [0x34]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t extract_2;
	/*
	 * [0x38]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t extract_3;
	/*
	 * [0x3c]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t extract_4;
	/*
	 * [0x40]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t huffman_1;
	/*
	 * [0x44]
	 * Reset: 0xffffffff  Access: RW
	 */
	uint32_t huffman_2;
	/*
	 * [0x48]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t huffman_3;
	/*
	 * [0x4c]
	 * Reset: 0x0         Access: RW
	 */
	uint32_t huffman_4;
};

/**************************************************************************************************
 * al_ssm_cmpr_regs
 **************************************************************************************************/
struct al_ssm_cmpr_regs {
	/* [0x0] */
	struct al_ssm_cmpr_lz_static_cfg lz_static_cfg;
	/* [0x20] */
	struct al_ssm_cmpr_lz_algorithm lz_algorithm;
	/* [0x40] */
	struct al_ssm_cmpr_lz_enc_profile lz_enc_profile;
	/* [0x50] */
	struct al_ssm_cmpr_lz_dec_profile lz_dec_profile;
	/* [0x5c] */
	uint32_t rsrvd_0[5];
	/* [0x70] */
	struct al_ssm_cmpr_lz_format lz_format;
	/* [0x94] */
	uint32_t rsrvd_1[3];
	/* [0xa0] */
	struct al_ssm_cmpr_lz_cam lz_cam;
	/* [0xac] */
	uint32_t rsrvd_2;
	/* [0xb0] */
	struct al_ssm_cmpr_lz_decoder_history_stat lz_decoder_history_stat;
	/* [0xd0] LZ encoder output arbitration configuration */
	struct al_ssm_cmpr_lz_output_arbiter lz_output_arbiter;
	/* [0xf4] */
	uint32_t rsrvd_3[3];
	/* [0x100] */
	struct al_ssm_cmpr_huffman_static_table huffman_static_table;
	/* [0x10c] */
	uint32_t rsrvd_4[61];
	/*
	 * [0x200] Compression and Decompression performance counters - Available starting at
	 * AL8/Alpha
	 */
	struct al_ssm_cmpr_lz_packet_stat lz_packet_stat;
	/* [0x234] */
	uint32_t rsrvd_5[114];
	/* [0x3fc] Compression version */
	struct al_ssm_cmpr_version version;
	/* [0x400] */
	uint32_t rsrvd_6[704];
	/* [0xf00] Spare Registers */
	struct al_ssm_cmpr_spare spare;
	/* [0xf50] */
	uint32_t rsrvd_7[44];
	/* [0x1000] SSMAE Generate Memory Controller */
	uint32_t generate_mem_ctrl[1024];
	/* [0x2000] SSMAE Transmit Memory Controller */
	uint32_t transmit_mem_ctrl[1024];
	/* [0x3000] SSMAE Extract Memory Controller */
	uint32_t extract_mem_ctrl[1024];
};

#ifdef __cplusplus
}
#endif

#endif

/** @} */
