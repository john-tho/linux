/*
 * Copyright 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_ap_dwrr_arb_regs.h
 *
 * @brief ap_dwrr_arb registers
 *
 * This file was auto-generated by RegGen v1.3.13
 *
 * Hash Key is: 7dc4d084b95e9b240f68d5264ed4abe3
 *
 * JSON: AP_DWRR_ARB.json
 *
 */

#ifndef __AL_HAL_AP_DWRR_ARB_REGS_H__
#define __AL_HAL_AP_DWRR_ARB_REGS_H__

#include "al_hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_ap_dwrr_arb_regs_queue_cfg
 *
 * per queue configurations
 **************************************************************************************************/
struct al_ap_dwrr_arb_regs_queue_cfg {
	/* [0x0] Vector of weight value per queue for multiply cfg_quantum */
	uint32_t weight;
	/* [0x4] Vector of maximum value for the credit counter */
	uint32_t cfg_cnt_max_val;
	/*
	 * [0x8] Vector of maximum value for the credit counter at reset (relevant when queue
	 * cfg_cnt_rst_sel = 1)
	 */
	uint32_t cfg_cnt_max_rst;
	/* [0xc] single bit configurations */
	uint32_t misc;
};

/**** weight register ****/
/* Reset: 0x0         Access: RW */
#define AP_DWRR_ARB_QUEUE_CFG_WEIGHT_VAL_MASK 0x0000000F
#define AP_DWRR_ARB_QUEUE_CFG_WEIGHT_VAL_SHIFT 0

/**** cfg_cnt_max_val register ****/
/* Reset: 0x0         Access: RW */
#define AP_DWRR_ARB_QUEUE_CFG_CFG_CNT_MAX_VAL_VAL_MASK 0xFFFFFFFF
#define AP_DWRR_ARB_QUEUE_CFG_CFG_CNT_MAX_VAL_VAL_SHIFT 0

/**** cfg_cnt_max_rst register ****/
/* Reset: 0x0         Access: RW */
#define AP_DWRR_ARB_QUEUE_CFG_CFG_CNT_MAX_RST_VAL_MASK 0xFFFFFFFF
#define AP_DWRR_ARB_QUEUE_CFG_CFG_CNT_MAX_RST_VAL_SHIFT 0

/**** misc register ****/
/*
 * Vector of reset credit disable. 0-credit will be reset when queue is empty (normal), 1-credit
 * will not be reset when queue is empty.
 * Reset: 0x0         Access: RW
 */
#define AP_DWRR_ARB_QUEUE_CFG_MISC_RST_CREDIT_DIS (1 << 0)
#define AP_DWRR_ARB_QUEUE_CFG_MISC_RST_CREDIT_DIS_MASK 0x00000001
#define AP_DWRR_ARB_QUEUE_CFG_MISC_RST_CREDIT_DIS_SHIFT 0
/*
 * Vector of late credit enable. 0-credit given only when no active queue available (normal), 1-late
 * arriving queue is given credit.
 * Reset: 0x0         Access: RW
 */
#define AP_DWRR_ARB_QUEUE_CFG_MISC_LATE_CREDIT_EN (1 << 1)
#define AP_DWRR_ARB_QUEUE_CFG_MISC_LATE_CREDIT_EN_MASK 0x00000002
#define AP_DWRR_ARB_QUEUE_CFG_MISC_LATE_CREDIT_EN_SHIFT 1
/*
 * Vector of software reset for the credit counter
 * Reset: 0x0         Access: RW
 */
#define AP_DWRR_ARB_QUEUE_CFG_MISC_SOFT_RESET (1 << 2)
#define AP_DWRR_ARB_QUEUE_CFG_MISC_SOFT_RESET_MASK 0x00000004
#define AP_DWRR_ARB_QUEUE_CFG_MISC_SOFT_RESET_SHIFT 2
/*
 * Vector of maximum value for the credit counter at reset (relevant when queue cfg_cnt_rst_sel = 1)
 * Reset: 0x0         Access: RW
 */
#define AP_DWRR_ARB_QUEUE_CFG_MISC_CNT_RST_SEL (1 << 3)
#define AP_DWRR_ARB_QUEUE_CFG_MISC_CNT_RST_SEL_MASK 0x00000008
#define AP_DWRR_ARB_QUEUE_CFG_MISC_CNT_RST_SEL_SHIFT 3

/**************************************************************************************************
 * al_ap_dwrr_arb_regs
 *
 * AP_DWRR_ARB configurations
 **************************************************************************************************/
struct al_ap_dwrr_arb_regs {
	/* [0x0] per queue configurations */
	struct al_ap_dwrr_arb_regs_queue_cfg queue_cfg[8];
	/* [0x80] Constant value to be added to credit counter at each round (log2) */
	uint32_t quantum;
};

/**** quantum register ****/
/* Reset: 0x0         Access: RW */
#define AP_DWRR_ARB_QUANTUM_VAL_MASK     0x0000000F
#define AP_DWRR_ARB_QUANTUM_VAL_SHIFT    0

#ifdef __cplusplus
}
#endif

#endif

/** @} */
