/*
 * Copyright 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_ap_mc_1lvl_scheduler_dp_regs.h
 *
 * @brief ap_mc_1lvl_scheduler_dp registers
 *
 * This file was auto-generated by RegGen v1.3.13
 *
 * Hash Key is: 31be7b0e10e3d98e07ac5304c011da17
 *
 * JSON: ap_mc_1lvl_scheduler_dp_regs.json
 *
 */

#ifndef __AL_HAL_AP_MC_1LVL_SCHEDULER_DP_REGS_H__
#define __AL_HAL_AP_MC_1LVL_SCHEDULER_DP_REGS_H__

#include "al_hal_common.h"

#include "al_hal_ap_dwrr_arbiter_regs.h"
#include "al_hal_ap_rate_limiter_1cl_regs.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_ap_mc_1lvl_scheduler_dp_general_conf
 *
 * General Configurations
 **************************************************************************************************/
struct al_ap_mc_1lvl_scheduler_dp_general_conf {
	/* [0x0] general configurations */
	uint32_t conf;
};

/**** conf register ****/
/*
 * Rate limiter software reset
 * Reset: 0x0         Access: WO, PulseOnW
 */
#define AP_MC_1LVL_SCHEDULER_DP_GENERAL_CONF_CONF_RL_SW_RESET (1 << 0)
#define AP_MC_1LVL_SCHEDULER_DP_GENERAL_CONF_CONF_RL_SW_RESET_MASK 0x00000001
#define AP_MC_1LVL_SCHEDULER_DP_GENERAL_CONF_CONF_RL_SW_RESET_SHIFT 0

/**************************************************************************************************
 * al_ap_mc_1lvl_scheduler_dp_regs
 **************************************************************************************************/
struct al_ap_mc_1lvl_scheduler_dp_regs {
	/* [0x0] General Configurations */
	struct al_ap_mc_1lvl_scheduler_dp_general_conf general_conf;
	/* [0x4] DWRR configuration */
	struct al_ap_dwrr_arbiter_regs dwrr_arbiter_conf;
	/* [0x44] */
	uint32_t rsrvd_0;
	/* [0x48] Per Client Rate limiter configuration */
	struct al_ap_rate_limiter_1cl_regs client_rate_limiter_conf[4];
	/* [0x148] */
	uint32_t rsrvd_1[174];
};

/* Asserts */
al_static_assert(sizeof(struct al_ap_dwrr_arbiter_regs) == 64,
	"Expected other registers struct size!");
al_static_assert(sizeof(struct al_ap_rate_limiter_1cl_regs) == 64,
	"Expected other registers struct size!");

#ifdef __cplusplus
}
#endif

#endif

/** @} */
