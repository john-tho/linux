/*
 * Copyright 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_ap_rate_limiter_1cl_regs.h
 *
 * @brief ap_rate_limiter_1cl registers
 *
 * This file was auto-generated by RegGen v1.3.13
 *
 * Hash Key is: 107fc9630245e62a31ddf7816bbdf0c9
 *
 * JSON: ap_rate_limiter_1cl_regs.json
 *
 */

#ifndef __AL_HAL_AP_RATE_LIMITER_1CL_REGS_H__
#define __AL_HAL_AP_RATE_LIMITER_1CL_REGS_H__

#include "al_hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_ap_rate_limiter_1cl_rtlmt_1cl
 *
 * Global Configuration
 **************************************************************************************************/
struct al_ap_rate_limiter_1cl_rtlmt_1cl {
	/* [0x0] */
	uint32_t global_conf;
	/* [0x4] Register for fast token bucket update control fields */
	uint32_t tb_tokens_psat;
	/* [0x8] Register for fast token bucket update control fields */
	uint32_t tbtokens__nsat;
};

/**** global_conf register ****/
/*
 * enable rate limiter
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_GLOBAL_CONF_EN (1 << 0)
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_GLOBAL_CONF_EN_MASK 0x00000001
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_GLOBAL_CONF_EN_SHIFT 0
/*
 * Decrement tokens in case arbiter is parked on client but no data is being streamed
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_GLOBAL_CONF_PARKED_EMPTY_TKN_DEC_EN (1 << 1)
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_GLOBAL_CONF_PARKED_EMPTY_TKN_DEC_EN_MASK 0x00000002
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_GLOBAL_CONF_PARKED_EMPTY_TKN_DEC_EN_SHIFT 1

/**** tb_tokens_psat register ****/
/*
 * Positive saturation limit
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_TB_TOKENS_PSAT_LIMIT_MASK 0x0000FFFF
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_TB_TOKENS_PSAT_LIMIT_SHIFT 0

/**** tbtokens__nsat register ****/
/*
 * Negative saturation limit. Must be a negative 2's complement number
 * Reset: 0xd8ef      Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_TBTOKENS__NSAT_LIMIT_MASK 0x0000FFFF
#define AP_RATE_LIMITER_1CL_RTLMT_1CL_TBTOKENS__NSAT_LIMIT_SHIFT 0

/**************************************************************************************************
 * al_ap_rate_limiter_1cl_rtlmt_prdc_fast
 **************************************************************************************************/
struct al_ap_rate_limiter_1cl_rtlmt_prdc_fast {
	/* [0x0] control of fast periodic update */
	uint32_t control;
	/* [0x4] Register for fast token bucket update control fields */
	uint32_t inc;
	/* [0x8] Register for fast token bucket update control fields */
	uint32_t period;
};

/**** control register ****/
/*
 * enable fast periodic token update
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_FAST_CONTROL_EN (1 << 0)
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_FAST_CONTROL_EN_MASK 0x00000001
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_FAST_CONTROL_EN_SHIFT 0

/**** inc register ****/
/*
 * Number of tokens to be added
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_FAST_INC_TOKENS_MASK 0x0000FFFF
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_FAST_INC_TOKENS_SHIFT 0

/**** period register ****/
/*
 * Number of cycles in period
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_FAST_PERIOD_MAX_MASK 0xFFFFFFFF
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_FAST_PERIOD_MAX_SHIFT 0

/**************************************************************************************************
 * al_ap_rate_limiter_1cl_rtlmt_prdc_slow
 **************************************************************************************************/
struct al_ap_rate_limiter_1cl_rtlmt_prdc_slow {
	/* [0x0] control of fast periodic update */
	uint32_t control;
	/* [0x4] Register for fast token bucket update control fields */
	uint32_t inc;
	/* [0x8] Register for fast token bucket update control fields */
	uint32_t period;
};

/**** control register ****/
/*
 * enable slow periodic token update
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_SLOW_CONTROL_EN (1 << 0)
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_SLOW_CONTROL_EN_MASK 0x00000001
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_SLOW_CONTROL_EN_SHIFT 0

/**** inc register ****/
/*
 * Number of tokens to be added
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_SLOW_INC_TOKENS_MASK 0x0000FFFF
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_SLOW_INC_TOKENS_SHIFT 0

/**** period register ****/
/*
 * Number of cycles in period
 * Reset: 0x0         Access: RW
 */
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_SLOW_PERIOD_MAX_MASK 0xFFFFFFFF
#define AP_RATE_LIMITER_1CL_RTLMT_PRDC_SLOW_PERIOD_MAX_SHIFT 0

/**************************************************************************************************
 * al_ap_rate_limiter_1cl_regs
 **************************************************************************************************/
struct al_ap_rate_limiter_1cl_regs {
	/* [0x0] Global Configuration */
	struct al_ap_rate_limiter_1cl_rtlmt_1cl rtlmt_1cl;
	/* [0xc] */
	struct al_ap_rate_limiter_1cl_rtlmt_prdc_fast rtlmt_prdc_fast;
	/* [0x18] */
	struct al_ap_rate_limiter_1cl_rtlmt_prdc_slow rtlmt_prdc_slow;
	/* [0x24] */
	uint32_t rsrvd_0[7];
};

#ifdef __cplusplus
}
#endif

#endif

/** @} */
