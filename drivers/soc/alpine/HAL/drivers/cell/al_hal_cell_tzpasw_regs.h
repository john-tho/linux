/*
 * Copyright 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_cell_tzpasw_regs.h
 *
 * @brief cell_tzpasw registers
 *
 * This file was auto-generated by RegGen v1.3.13
 *
 * Hash Key is: 38be918f4f3a2513dfbb16c9ff63c70d
 *
 * JSON: AP_MEM_BAR_DECODE_TZ.json
 *
 */

#ifndef __AL_HAL_CELL_TZPASW_REGS_H__
#define __AL_HAL_CELL_TZPASW_REGS_H__

#include "al_hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_cell_tzpasw_regs
 **************************************************************************************************/
struct al_cell_tzpasw_regs {
	/* [0x0] */
	uint32_t high;
	/* [0x4] */
	uint32_t low;
	/* [0x8] TZPASW WR Counter - Clear on Read */
	uint32_t wr_count;
	/* [0xc] TZPASW RD Counter - Clear on Read */
	uint32_t rd_count;
};

/**** high register ****/
/*
 * Window base address [47:32]
 * Reset: 0x0         Access: RW
 */
#define CELL_TZPASW_HIGH_BASE_HIGH_MASK  0x0000FFFF
#define CELL_TZPASW_HIGH_BASE_HIGH_SHIFT 0
/*
 * When this bit is set entire register (low and high) is locked and cannot be written until reset
 * Reset: 0x0         Access: RW
 */
#define CELL_TZPASW_HIGH_WRITE_PROTECT   (1 << 16)
#define CELL_TZPASW_HIGH_WRITE_PROTECT_MASK 0x00010000
#define CELL_TZPASW_HIGH_WRITE_PROTECT_SHIFT 16
/*
 * Minimum size is 4B.
 * 0 - Disable and ignore the window
 * 1 - Window size = 4 byte
 * 2 - Window size = 8 byte
 * S - Window size = 2^(S+1) bytes.
 * When the TZPASW determines the window within DRAM, its minimum size is  4KB (S >10).
 * Reset: 0x0         Access: RW
 */
#define CELL_TZPASW_HIGH_WINDOW_SIZE_MASK 0x3F000000
#define CELL_TZPASW_HIGH_WINDOW_SIZE_SHIFT 24
/*
 * Defines the access protected by this TZ bar
 * Reset: 0x3         Access: RW
 */
#define CELL_TZPASW_HIGH_SECURITY_MODE_MASK 0xC0000000
#define CELL_TZPASW_HIGH_SECURITY_MODE_SHIFT 30
/* Reserved */
#define CELL_TZPASW_HIGH_SECURITY_MODE_RESERVED  0x0
/* Secure read. Read transactions are blocked unless in Secure State */
#define CELL_TZPASW_HIGH_SECURITY_MODE_SEC_READ  0x1
/* Secure write. Write transactions are blocked unless in Secure State */
#define CELL_TZPASW_HIGH_SECURITY_MODE_SEC_WRITE 0x2
/* Both. All transactions are blocked unless in Secure State */
#define CELL_TZPASW_HIGH_SECURITY_MODE_SEC_BOTH  0x3

/**** low register ****/
/*
 * Window base address [31:2].
 * Only the bits above the TZPASW size are checked, rest are masked.
 * Reset: 0x0         Access: RW
 */
#define CELL_TZPASW_LOW_BASE_LOW_MASK    0xFFFFFFFC
#define CELL_TZPASW_LOW_BASE_LOW_SHIFT   2

/**** wr_count register ****/
/*
 * Number of TZ security violations
 * Reset: 0x0         Access: RO
 */
#define CELL_TZPASW_WR_COUNT_COUNT_MASK  0x0000FFFF
#define CELL_TZPASW_WR_COUNT_COUNT_SHIFT 0
/*
 * Master ID that performed security violation
 * Reset: 0x0         Access: RO
 */
#define CELL_TZPASW_WR_COUNT_MASTER_ID_MASK 0x001F0000
#define CELL_TZPASW_WR_COUNT_MASTER_ID_SHIFT 16
/*
 * If set - more than one master performed a security violation
 * Reset: 0x0         Access: RO
 */
#define CELL_TZPASW_WR_COUNT_MULTI_MASTERS (1 << 24)
#define CELL_TZPASW_WR_COUNT_MULTI_MASTERS_MASK 0x01000000
#define CELL_TZPASW_WR_COUNT_MULTI_MASTERS_SHIFT 24

/**** rd_count register ****/
/*
 * Number of TZ security violations
 * Reset: 0x0         Access: RO
 */
#define CELL_TZPASW_RD_COUNT_COUNT_MASK  0x0000FFFF
#define CELL_TZPASW_RD_COUNT_COUNT_SHIFT 0
/*
 * Master ID that performed security violation
 * Reset: 0x0         Access: RO
 */
#define CELL_TZPASW_RD_COUNT_MASTER_ID_MASK 0x001F0000
#define CELL_TZPASW_RD_COUNT_MASTER_ID_SHIFT 16
/*
 * If set - more than one master performed a security violation
 * Reset: 0x0         Access: RO
 */
#define CELL_TZPASW_RD_COUNT_MULTI_MASTERS (1 << 24)
#define CELL_TZPASW_RD_COUNT_MULTI_MASTERS_MASK 0x01000000
#define CELL_TZPASW_RD_COUNT_MULTI_MASTERS_SHIFT 24

#ifdef __cplusplus
}
#endif

#endif

/** @} */
