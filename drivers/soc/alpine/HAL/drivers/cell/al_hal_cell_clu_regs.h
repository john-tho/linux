/*
 * Copyright 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_cell_clu_regs.h
 *
 * @brief cell_clu registers
 *
 * This file was auto-generated by RegGen v1.3.13
 *
 * Hash Key is: fbf7ff8a6d403ed34f59824506b958cc
 *
 * JSON: AP_CLU.json
 *
 */

#ifndef __AL_HAL_CELL_CLU_REGS_H__
#define __AL_HAL_CELL_CLU_REGS_H__

#include "al_hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_cell_clu_regs_opsel
 *
 * input selector
 * 0 - Input0 selector
 * 1 - Input1 selector
 * 2 - Mask selector
 **************************************************************************************************/
struct al_cell_clu_regs_opsel {
	/* [0x0] */
	uint32_t sel;
};

/**** sel register ****/
/* Reset: 0x0         Access: RW */
#define CELL_CLU_OPSEL_SEL_VAL_MASK      0x0000001F
#define CELL_CLU_OPSEL_SEL_VAL_SHIFT     0

/**************************************************************************************************
 * al_cell_clu_regs
 *
 * AP_ALU configurations
 **************************************************************************************************/
struct al_cell_clu_regs {
	/*
	 * [0x0] input selector
	 * 0 - Input0 selector
	 * 1 - Input1 selector
	 * 2 - Mask selector
	 */
	struct al_cell_clu_regs_opsel opsel[3];
	/* [0xc] */
	uint32_t opcodes;
};

/**** opcodes register ****/
/*
 * Mask opcode
 *  00 - KEEP
 *  01 - AND
 *  10 - XOR
 *  11 - OR
 * Reset: 0x0         Access: RW
 */
#define CELL_CLU_OPCODES_MASK0_CMD_MASK  0x00000003
#define CELL_CLU_OPCODES_MASK0_CMD_SHIFT 0
/* KEEP */
#define CELL_CLU_OPCODES_MASK0_CMD_KEEP 0x0
/* AND */
#define CELL_CLU_OPCODES_MASK0_CMD_AND  0x1
/* XOR */
#define CELL_CLU_OPCODES_MASK0_CMD_XOR  0x2
/* OR */
#define CELL_CLU_OPCODES_MASK0_CMD_OR   0x3
/*
 * flip bits pre mask0_cmd
 * Reset: 0x0         Access: RW
 */
#define CELL_CLU_OPCODES_FLIP_PRE_MASK0  (1 << 6)
#define CELL_CLU_OPCODES_FLIP_PRE_MASK0_MASK 0x00000040
#define CELL_CLU_OPCODES_FLIP_PRE_MASK0_SHIFT 6
/*
 * flip bits post mask0_cmd
 * Reset: 0x0         Access: RW
 */
#define CELL_CLU_OPCODES_FLIP_POST_MASK0 (1 << 7)
#define CELL_CLU_OPCODES_FLIP_POST_MASK0_MASK 0x00000080
#define CELL_CLU_OPCODES_FLIP_POST_MASK0_SHIFT 7
/*
 * Mask opcode
 *  00 - KEEP
 *  01 - AND
 *  10 - XOR
 *  11 - OR
 * Reset: 0x0         Access: RW
 */
#define CELL_CLU_OPCODES_MASK1_CMD_MASK  0x00000300
#define CELL_CLU_OPCODES_MASK1_CMD_SHIFT 8
/* KEEP */
#define CELL_CLU_OPCODES_MASK1_CMD_KEEP 0x0
/* AND */
#define CELL_CLU_OPCODES_MASK1_CMD_AND  0x1
/* XOR */
#define CELL_CLU_OPCODES_MASK1_CMD_XOR  0x2
/* OR */
#define CELL_CLU_OPCODES_MASK1_CMD_OR   0x3
/*
 * flip bits pre mask1_cmd
 * Reset: 0x0         Access: RW
 */
#define CELL_CLU_OPCODES_FLIP_PRE_MASK1  (1 << 14)
#define CELL_CLU_OPCODES_FLIP_PRE_MASK1_MASK 0x00004000
#define CELL_CLU_OPCODES_FLIP_PRE_MASK1_SHIFT 14
/*
 * flip bits post mask1_cmd
 * Reset: 0x0         Access: RW
 */
#define CELL_CLU_OPCODES_FLIP_POST_MASK1 (1 << 15)
#define CELL_CLU_OPCODES_FLIP_POST_MASK1_MASK 0x00008000
#define CELL_CLU_OPCODES_FLIP_POST_MASK1_SHIFT 15
/*
 * Compare opcode
 *  000 - A>B
 *  001 - A>=B
 *  010 - A==B
 *  011 - A != B
 *  100 - A < B
 *  101 - A <= B
 * Reset: 0x0         Access: RW
 */
#define CELL_CLU_OPCODES_COMPARE_CMD_MASK 0x00070000
#define CELL_CLU_OPCODES_COMPARE_CMD_SHIFT 16
/* A>B */
#define CELL_CLU_OPCODES_COMPARE_CMD_A_LARGER_B        0x0
/* A>=B */
#define CELL_CLU_OPCODES_COMPARE_CMD_A_LARGER_EQUAL_B  0x1
/* A==B */
#define CELL_CLU_OPCODES_COMPARE_CMD_A_EQUAL_B         0x2
/* A!=B */
#define CELL_CLU_OPCODES_COMPARE_CMD_A_NOT_EQUAL_B     0x3
/* A<B */
#define CELL_CLU_OPCODES_COMPARE_CMD_A_SMALLER_B       0x4
/* A<=B */
#define CELL_CLU_OPCODES_COMPARE_CMD_A_SMALLER_EQUAL_B 0x5

#ifdef __cplusplus
}
#endif

#endif

/** @} */
