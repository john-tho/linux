/*
 * Copyright 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_ap_dwrr_arbiter_regs.h
 *
 * @brief ap_dwrr_arbiter registers
 *
 * This file was auto-generated by RegGen v1.3.13
 *
 * Hash Key is: c7136070c5000923b017e6afa290735b
 *
 * JSON: ap_dwrr_arbiter_regs.json
 *
 */

#ifndef __AL_HAL_AP_DWRR_ARBITER_REGS_H__
#define __AL_HAL_AP_DWRR_ARBITER_REGS_H__

#include "al_hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_ap_dwrr_arbiter_dwrr_global
 *
 * Global Configuration
 **************************************************************************************************/
struct al_ap_dwrr_arbiter_dwrr_global {
	/* [0x0] Global control */
	uint32_t conf;
	/* [0x4] SW Reset register */
	uint32_t sw_reset;
	/* [0x8] */
	uint32_t rsrvd_0[2];
};

/**** conf register ****/
/*
 * Enable dwrr arbitration. If disabled will execute RR arbitration
 * Reset: 0x1         Access: RW
 */
#define AP_DWRR_ARBITER_DWRR_GLOBAL_CONF_ARB_GLOBAL_EN (1 << 0)
#define AP_DWRR_ARBITER_DWRR_GLOBAL_CONF_ARB_GLOBAL_EN_MASK 0x00000001
#define AP_DWRR_ARBITER_DWRR_GLOBAL_CONF_ARB_GLOBAL_EN_SHIFT 0

/**** sw_reset register ****/
/*
 * Enable dwrr arbitration. If disabled will execute RR arbitration
 * Reset: 0x0         Access: RW, PulseOnW
 */
#define AP_DWRR_ARBITER_DWRR_GLOBAL_SW_RESET_ARB_SW_RESET (1 << 0)
#define AP_DWRR_ARBITER_DWRR_GLOBAL_SW_RESET_ARB_SW_RESET_MASK 0x00000001
#define AP_DWRR_ARBITER_DWRR_GLOBAL_SW_RESET_ARB_SW_RESET_SHIFT 0

/**************************************************************************************************
 * al_ap_dwrr_arbiter_dwrr_cl_conf
 *
 * Per client configuration
 **************************************************************************************************/
struct al_ap_dwrr_arbiter_dwrr_cl_conf {
	/* [0x0] client quantum added each new round */
	uint32_t quantum;
	/* [0x4] Positive saturation limit. Must be a positive 2's complement number */
	uint32_t tb_psat;
	/* [0x8] Negative saturation limit. Must be a negative 2's complement number */
	uint32_t tb_nsat;
};

/**** quantum register ****/
/*
 * Client quantum
 * Reset: 0x2711      Access: RW
 */
#define AP_DWRR_ARBITER_DWRR_CL_CONF_QUANTUM_QUANTUM_MASK 0x0000FFFF
#define AP_DWRR_ARBITER_DWRR_CL_CONF_QUANTUM_QUANTUM_SHIFT 0

/**** tb_psat register ****/
/*
 * Positive saturation limit
 * Reset: 0x2711      Access: RW
 */
#define AP_DWRR_ARBITER_DWRR_CL_CONF_TB_PSAT_LIMIT_MASK 0x0000FFFF
#define AP_DWRR_ARBITER_DWRR_CL_CONF_TB_PSAT_LIMIT_SHIFT 0

/**** tb_nsat register ****/
/*
 * Negative saturation limit. This is a negative 2's complement number
 * Reset: 0xd8ef      Access: RW
 */
#define AP_DWRR_ARBITER_DWRR_CL_CONF_TB_NSAT_LIMIT_MASK 0x0000FFFF
#define AP_DWRR_ARBITER_DWRR_CL_CONF_TB_NSAT_LIMIT_SHIFT 0

/**************************************************************************************************
 * al_ap_dwrr_arbiter_regs
 *
 * DWRR arbiter
 **************************************************************************************************/
struct al_ap_dwrr_arbiter_regs {
	/* [0x0] Global Configuration */
	struct al_ap_dwrr_arbiter_dwrr_global dwrr_global;
	/* [0x10] Per client configuration */
	struct al_ap_dwrr_arbiter_dwrr_cl_conf dwrr_cl_conf[4];
};

#ifdef __cplusplus
}
#endif

#endif

/** @} */
