/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_pmu_macro_mem_ctrl_regs.h
 *
 * @brief pmu_macro_mem_ctrl registers
 *
 * This file was auto-generated by RegGen v1.3.8
 *
 * Hash Key is: 8e4775f146b2cbf0a84f182820db0601
 *
 * JSON: pmu_macro_mem_ctrl.json
 *
 */

#ifndef __AL_HAL_PMU_MACRO_MEM_CTRL_REGS_H__
#define __AL_HAL_PMU_MACRO_MEM_CTRL_REGS_H__

#include "al_hal_common.h"

#include "al_hal_ap_mem_wrap_regs.h"
#include "al_hal_iofic_x1_regs.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_pmu_macro_mem_ctrl_mem_ctrl
 *
 * mem_ctrl header
 **************************************************************************************************/
struct al_pmu_macro_mem_ctrl_mem_ctrl {
	/* [0x0] */
	uint32_t info;
	/* [0x4] */
	uint32_t sms_smart_mode;
	/* [0x8] */
	uint32_t sms_status;
	/* [0xc] */
	uint32_t rsrvd_0[5];
};

/**** info register ****/
/* Reset: 0x2         Access: RO, RreturnsRst */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_INFO_MEM_NUM_MASK 0x000000FF
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_INFO_MEM_NUM_SHIFT 0
/* Reset: 0x1         Access: RO, RreturnsRst */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_INFO_VERSION_MASK 0x0000FF00
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_INFO_VERSION_SHIFT 8

/**** sms_smart_mode register ****/
/*
 * BIST RUN via SMART
 * Reset: 0x0         Access: RW, PulseOnW
 */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_SMART_MODE_BIST_RUN (1 << 0)
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_SMART_MODE_BIST_RUN_MASK 0x00000001
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_SMART_MODE_BIST_RUN_SHIFT 0
/*
 * BIST Algorithm select
 * Reset: 0x0         Access: RW
 */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_SMART_MODE_BIST_ALGO_SEL_MASK 0x0000003E
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_SMART_MODE_BIST_ALGO_SEL_SHIFT 1

/**** sms_status register ****/
/*
 * BIST Done
 * Reset: 0x0         Access: RO
 */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_READY (1 << 0)
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_READY_MASK 0x00000001
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_READY_SHIFT 0
/*
 * BIST Fail
 * Reset: 0x0         Access: RO
 */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_FAIL (1 << 1)
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_FAIL_MASK 0x00000002
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_FAIL_SHIFT 1
/*
 * Execution indicator
 * Reset: 0x0         Access: RO
 */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_EXEC (1 << 2)
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_EXEC_MASK 0x00000004
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_EXEC_SHIFT 2
/*
 * Stop On Fail
 * Reset: 0x0         Access: RO
 */
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_SONE (1 << 3)
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_SONE_MASK 0x00000008
#define PMU_MACRO_MEM_CTRL_MEM_CTRL_SMS_STATUS_SMS_SONE_SHIFT 3

/**************************************************************************************************
 * al_pmu_macro_mem_ctrl_regs
 **************************************************************************************************/
struct al_pmu_macro_mem_ctrl_regs {
	/* [0x0] mem_ctrl header */
	struct al_pmu_macro_mem_ctrl_mem_ctrl mem_ctrl;
	/* [0x20] */
	uint32_t rsrvd_0[56];
	/* [0x100] intc */
	struct al_iofic_x1_regs ip;
	/* [0x140] */
	uint32_t rsrvd_1[48];
	/* [0x200] ela_sram_big_0 registers */
	struct al_ap_mem_wrap_regs ela_sram_big_0;
	/* [0x220] ela_sram_big_1 registers */
	struct al_ap_mem_wrap_regs ela_sram_big_1;
	/* [0x240] */
	uint32_t rsrvd_2[112];
};

/* Asserts */
al_static_assert(sizeof(struct al_iofic_x1_regs) == 64,
	"Expected other registers struct size!");
al_static_assert(sizeof(struct al_ap_mem_wrap_regs) == 32,
	"Expected other registers struct size!");

#ifdef __cplusplus
}
#endif

#endif

/** @} */
