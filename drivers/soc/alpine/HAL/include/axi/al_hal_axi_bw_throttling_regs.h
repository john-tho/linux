/*
 * Copyright 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved
 */

/**
 *  @{
 * @file   al_hal_axi_bw_throttling_regs.h
 *
 * @brief axi_bw_throttling registers
 *
 * This file was auto-generated by RegGen v1.3
 *
 */

#ifndef __AL_HAL_AXI_BW_THROTTLING_REGS_H__
#define __AL_HAL_AXI_BW_THROTTLING_REGS_H__

#include "al_hal_plat_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/**************************************************************************************************
 * al_axi_bw_throttling_regs
 *
 * Configurations of AXI_BW_THROTTLING
 **************************************************************************************************/
struct al_axi_bw_throttling_regs {
	/* [0x0] Control over token bucket mode of operation */
	uint32_t token_control;
	/*
	 * [0x4] Control over token bucket timer
	 * period in clocks between two consecutive updates. (Value ==> Period-1).
	 * Reset: 0x0         Access: RW
	 */
	uint32_t token_period;
	/*
	 * [0x8] Control over token bucket inc
	 * How many token to give on each period
	 * Reset: 0x0         Access: RW
	 */
	uint32_t token_val;
	/*
	 * [0xc] Control over token bucket saturation value
	 * Maximum value for token bucket
	 * Reset: 0x0         Access: RW
	 */
	uint32_t token_saturation;
	/* [0x10] Control over clearing token bucket */
	uint32_t clr;
	/*
	 * [0x14] Set token bucket value
	 * set token to this value
	 * Reset: 0x0         Access: WO, PulseOnW
	 */
	uint32_t init_token;
	/*
	 * [0x18] Expose current number of tokens
	 * Expose number of token
	 * Reset: 0x0         Access: RO
	 */
	uint32_t read_token;
	/* [0x1c] */
	uint32_t rsrvd_0;
};

/**** token_control register ****/
/*
 * When set rate limit is active
 * Reset: 0x0         Access: RW
 */
#define AXI_BW_THROTTLING_TOKEN_CONTROL_RATE_LIMIT_EN (1 << 0)
#define AXI_BW_THROTTLING_TOKEN_CONTROL_RATE_LIMIT_EN_MASK 0x00000001
#define AXI_BW_THROTTLING_TOKEN_CONTROL_RATE_LIMIT_EN_SHIFT 0
/*
 * When '0' token consumption in AXI betas
 * When '1' token consumption in AXI transactions
 * Reset: 0x0         Access: RW
 */
#define AXI_BW_THROTTLING_TOKEN_CONTROL_MODE (1 << 1)
#define AXI_BW_THROTTLING_TOKEN_CONTROL_MODE_MASK 0x00000002
#define AXI_BW_THROTTLING_TOKEN_CONTROL_MODE_SHIFT 1
/*
 * When '0' token consumption in 32B
 * When '1' token consumption in 64B (Cache line)
 * This means that if transaction is not in Cache line granularity,
 * token bucket will "charge" transaction as if it was bigger
 * Reset: 0x0         Access: RW
 */
#define AXI_BW_THROTTLING_TOKEN_CONTROL_CL (1 << 2)
#define AXI_BW_THROTTLING_TOKEN_CONTROL_CL_MASK 0x00000004
#define AXI_BW_THROTTLING_TOKEN_CONTROL_CL_SHIFT 2

/**** clr register ****/
/*
 * Reset token bucket
 * Reset: 0x0         Access: WO, PulseOnW
 */
#define AXI_BW_THROTTLING_CLR_TOKEN      (1 << 0)
#define AXI_BW_THROTTLING_CLR_TOKEN_MASK 0x00000001
#define AXI_BW_THROTTLING_CLR_TOKEN_SHIFT 0

#ifdef __cplusplus
}
#endif

#endif

/** @} */
